<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAet+PIHrfjlB53o2Aed6Nv3nd
        i9953Yv/AJkAvwCZAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAe+CRMHrgkGB634+Aet+Ov4Dgk++R5aD/peyw/7Tw
        vP/C9cf/yvfN/0W7R/8dpx3/AJkA/wCZAK8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAe+GTQHvhknB74JGPeuCQv4XjmP+V6KT/oeus/67vtv+988L/x/bK/8D0
        w/+79L//tvS7/7Hztv/E9Mf/QLdB/0q9S/9gyWH/AJkA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAB84pYQfOKVQHvhlHB74ZOfe+GSz4TkmP+R6KH/neyp/63xtP+69b3/vvbB/7n0vf+39Lv/tfO5/7Hz
        tv+s87H/q/Kw/6rysP+t87P/rfS1/8v3z/9Eu0X/T8FQ/3fVeP8AmQD/AAAAAAAAAAB845cQfOOWQHzi
        loB84pWve+GU34nmnf+V6qX/n+6r/6nysf+497v/tfa4/7P0t/+z9Lf/svS2/7DztP+t87L/rPOx/6/0
        tf+w9Lb/sfW4/7T3u/+1973/tvi+/7X3vv+0973/0frX/0a8R/9RwlL/d9V4/wCZAP9845e/fOKW74/p
        ov+Z7Kj/n+6r/6nysf+397r/s/W2/7H0tf+w9LT/r/Sz/67zs/+t87L/sfW2/7L1uP+z9rn/tve9/7f4
        vv+4+MD/t/i//7b4vv+1977/tPe9/7P3vP+y9rz/sfa7/7D2uv/P+db/RrxH/1HCUv931Xj/AJkA/3vh
        kv+6+L3/rvOx/63zsP+s8rD/q/Kv/6zysP+w9LT/s/W4/7T2uv+3973/uvnB/7r5wf+5+cH/uPjA/7f4
        v/+2+L//tfe+/7T3vf+z973/sva8/7H2u/+w9rr/r/W6/671uf+t9bj/rPS4/8341P9GvEf/UcJS/3fV
        eP8AmQD/ed6N/8L8xv+397z/rvOz/7n4vv+8+sL/vfrD/7z6wv+7+cH/uvnB/7n4wP+4+L//t/i//7b3
        vv+0973/s/e9/7L2vP+x9rv/sPa7/6/1uv+u9bn/rfW5/6z0uP+r9Lf/qvS3/6nztv+o87X/yvjS/0a8
        R/9RwlL/d9V4/wCZAP943Ij/vvrE/7b3vP+u87P/u/nC/7r5wf+5+cD/uPjA/7f4v/+2+L7/tfe+/7T3
        vf+z97z/sva8/7H2u/+w9br/r/W5/671uf+t9Lj/rPS3/6r0t/+p87b/qPO1/6fztf+m8rT/pfKz/6Ty
        s//I99H/RrxH/1HCUv931Xj/AJkA/3bZg/+6+cH/svW5/6nysP+3+L//tvi+/7X3vv+0973/s/e8/7L2
        vP+x9rv/sPa6/6/1uv+u9bn/rfW4/6z0uP+r9Lf/qvO2/6nztv+o87X/p/K0/6bytP+l8rP/pPGy/6Px
        sf+i8bH/oPCw/8b2z/9GvEf/UcJS/3fVeP8AmQD/ddd+/7b4v/+u9Lb/pfCt/7P3vf+y9rz/sfa7/7D2
        u/+v9br/rvW5/631uP+s9Lj/q/S3/6r0tv+p87b/qPO1/6fztP+m8rT/pfKz/6Tysv+j8bL/ovGx/6Hw
        sP+g8LD/n/Cv/57vrv+d767/w/XO/0a8R/9RwlL/d9V4/wCZAP9z1Hn/s/a8/6rzs/+h76r/r/W6/671
        uf+u9bn/rvS4/630t/+r9Lf/qfO2/6jztf+n87X/pvK0/6Xys/+k8rP/o/Gy/6Lxsf+h8bD/oPCw/5/w
        r/+e8K7/ne+u/5zvrf+b7qz/mu6s/5nuq//B9Mz/RrxH/1HCUv931Xj/AJkA/3HSdP+v9br/pvGx/53t
        qP+s9Lf/q/S3/6zztv+s87X/rfO2/63yt/+s8rf/qvK2/6bxtP+i8bH/ofGx/6DwsP+f8K//nvCv/53v
        rv+c763/m++t/5rurP+Z7qv/mO6r/5ftqv+W7an/leyo/7/0y/9GvEf/UcJS/3fVeP8AmQD/cM9v/6v0
        t/+i8K7/meyl/6jztf+p8rT/qfK0/6rytP+q8bT/q/G2/6zxtv+s8Lf/rfC4/63wuf+q77f/p++1/6Pv
        sv+e76//me6r/5juq/+X7ar/lu2p/5Xtqf+U7Kj/k+yn/5Lsp/+R66b/vPPJ/0a8R/9RwlL/d9V4/wCZ
        AP9uzWr/p/O0/57vrP+W66P/pfKy/6bxsv+n8bH/p/Cy/6jws/+o8LT/qe+1/6rvtf+q77b/q+63/6zu
        uP+s7rn/re+6/63vu/+u77v/qu+5/6fvtv+h7rP/ne2v/5nsrP+U66j/juqk/43qo/+68sj/RrxH/1HC
        Uv931Xj/AJkA/23KZf+j8bL/m+2p/5PqoP+j8LD/o/Cv/6TwsP+l77D/pe+x/6bvsv+m7rP/p+60/6jt
        tf+o7bX/qe23/6rut/+q7rj/q+65/6vuuv+s77v/re+8/63vvP+u8L3/r/C+/67wvv+u8L7/q++7/8j0
        0/9QwFH/UcJS/3fVeP8AmQD/a8hg/5/wr/+Y7Kf/keie/6Dvrf+h763/ou6u/6Lur/+j7rD/o+2x/6Tt
        sf+l7bL/peyz/6bstP+n7LX/p+22/6jtt/+o7bf/qe64/6ruuf+q7rr/q+67/6zvvP+s77z/rO+9/6vv
        vP+q7rv/zPXX/1TBVf9RwlL/d9V4/wCZAP9pxVv/nO+t/5XrpP+P55v/nu6r/57trP+f7az/oO2t/6Ds
        rv+h7K//oeyw/6Lrsf+j67H/o+uy/6Tss/+l7LT/pey1/6bstv+m7bf/p+24/6jtuP+o7rn/qe66/6ru
        u/+p7rv/qO66/6fuuv/K9dX/VMFV/1HCUv931Xj/AJkA/1eoK/+F0mr/idyD/4zmmf+b7Kn/jdqA/3C5
        M/92wEP/lOCS/57rrf+f6q7/itR3/2u2LP+K1Hf/ouuy/6Lrs/+j67P/o+y0/6Tstf+k7Lb/pey3/6bt
        uP+m7bj/p+65/6btuf+m7bj/pe24/8n01P9UwVX/UcJS/3fVeP8AmQD/RowA/3C2Kv9stCf/abIl/3W+
        Pf9rsyP/h8VK/3q8N/9osR//e8ZT/37JW/9osR//gMBA/2ewHf9xvDz/mOKd/6Drsv+h67L/oeu0/6Lr
        tP+j7LX/o+y2/6Tst/+k7Lf/pOy3/6Pst/+i67b/x/PT/1TBVf9RwlL/d9V4/wCZAP9Yqi6far1C7268
        Of9zuzD/cbYs/5TOW/+o3Hf/r+GB/57Ua/94ujT/bLMl/5HLV/+r3nr/pNhy/3q8N/9grBT/Z7Mm/3rH
        V/+L1n//m+ep/6Drs/+h67X/oey1/6Lrtv+h67X/oOu1/6DrtP/F89L/VMFV/1HCUv931Xj/AJkA/wAA
        AAAAAAAAY7tFUGK6RJ9xw0fffMhN/43PWf+e12n/mtVr/3rFVe93wEL/kdJa/5vVZP+h2G3/mdRp/2Sx
        Jd9frBb/XqsR/12qEP9cqQ7/bLk2/5rmqP+f67T/n+u0/57rtP+e6rP/neqz/8Ty0f9UwVX/UcJS/3fV
        eP8AmQD/AAAAAAAAAAAAAAAAAAAAAAAAAABgtz0gYLY7cF+1Op9ftTpAAAAAAFC8RzBYtjuAbLw9z3XA
        Q/9ktThgAAAAAFywLyBcrSFwXKsYz1yqEf9bqQz/YrAg/5Ddk/+c6rL/nOmy/5vpsv+a6bH/wvLQ/1TB
        Vf9RwlL/d9V4/wCZAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWawnIFajDJ9aqAv/XasU/4HQcf+Z6bD/mOmv/5fo
        r//A8c//VMFV/1HCUv931Xj/AJkA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFajDGBYpwnvWKcI/26/
        Rf+W567/leet/7/xzf9UwVX/UcJS/3fVeP8AmQD/AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEyV
        AzBXpgnfVqYG/2GxJP+O46H/vfDN/1TBVf9RwlL/d9V4/wCZAP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEaMABBToQWvVaUF/1ioDv+j3Zn/VMFV/1HCUv931Xj/AJkA/wAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABRnwOAU6MD/1OkAv9LuT3/UcJS/3fVeP8AmQD/AAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABOmgFQUaEB70CpKf8vlCL/Y8Bb/wCW
        AP8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABNmAEgOpQWzyKJ
        F/89mib/AHMA/wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAEYcVQAt+DZ8DdATv/////////gH//8AA//gAAP4AAADAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAD4QQAA///gAP//
        +AD///wA///+AP///4D////A////4P////g=
</value>
  </data>
</root>